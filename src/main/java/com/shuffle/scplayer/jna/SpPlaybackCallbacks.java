package com.shuffle.scplayer.jna;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SpPlaybackCallbacks extends Structure {
	/** C type : notify_callback* */
	public SpPlaybackCallbacks.notify_callback notify$;
	/** C type : audio_data_callback* */
	public SpPlaybackCallbacks.audio_data_callback audio_data;
	/** C type : seek_callback* */
	public SpPlaybackCallbacks.seek_callback seek;
	/** C type : apply_volume_callback* */
	public SpPlaybackCallbacks.apply_volume_callback apply_volume;
	public interface notify_callback extends Callback {
		void apply(int notification, Pointer userdata);
	};
	public interface audio_data_callback extends Callback {
		int apply(Pointer samples, int num_samples, SpSampleFormat format, IntByReference pending, Pointer userdata);
	};
	public interface seek_callback extends Callback {
		void apply(int millis, Pointer userdata);
	};
	public interface apply_volume_callback extends Callback {
		void apply(int volume, Pointer userdata);
	};
	public SpPlaybackCallbacks() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("notify$", "audio_data", "seek", "apply_volume");
	}
	/**
	 * @param notify$ C type : notify_callback*<br>
	 * @param audio_data C type : audio_data_callback*<br>
	 * @param seek C type : seek_callback*<br>
	 * @param apply_volume C type : apply_volume_callback*
	 */
	public SpPlaybackCallbacks(SpPlaybackCallbacks.notify_callback notify$, SpPlaybackCallbacks.audio_data_callback audio_data, SpPlaybackCallbacks.seek_callback seek, SpPlaybackCallbacks.apply_volume_callback apply_volume) {
		super();
		this.notify$ = notify$;
		this.audio_data = audio_data;
		this.seek = seek;
		this.apply_volume = apply_volume;
	}
	public SpPlaybackCallbacks(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SpPlaybackCallbacks implements Structure.ByReference {
		
	};
	public static class ByValue extends SpPlaybackCallbacks implements Structure.ByValue {
		
	};
}
